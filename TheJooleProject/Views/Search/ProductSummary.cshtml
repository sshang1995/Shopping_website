
@{
    ViewBag.Title = "ProductSummary";
}

@model TheJooleProject.Models.ProductSummaryViewModel
@*<h2>Search</h2>*@

@*<div class="category">


    </div>*@
@Styles.Render("~/Content/TheJooleProject/ProductSummary")

<div class="d-inline-block">
    <nav class="navbar fixed-top navbar-dark" id="header">
        <a class="narbar-brand my-2" href="#">
            <img src="~/Content/Images/Joole.png" width="100" height="40" alt="" />
        </a>

        <div class="mx-auto">

            <div class="btn-group">


                <button class="btn dropdown-toggle" type="button" id="categoryMenuBtn" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Category
                </button>
                <div class="dropdown-menu" aria-labelledby="categoryMenuBtn" id="categoriesDropDown">
                    @*<a class="dropdown-item" href="#" data-selected="true" hidden> All </a>*@
                    @{


                        foreach (var item in Model.c)
                        {
                            <a class="dropdown-item" href="#" data-selected="false" value="@item.CategoryName">@item.CategoryName</a>
                        }
                    }
                </div>


            </div>
            <div class="btn-group">

                <form class="form-inline my-2 my-lg-0" id="search">
                    <input name="SubCategory" list="subCategories" class="form-control mr-sm-2" type="text" aria-label="Search" id="searchInput" placeholder="Search..">

                    <datalist id="subCategories">
                        @{
                            foreach (var val in Model.t)
                            {
                                <option value="@val.c2.SubCategory_Name" class="@val.c1.CategoryName" data-id="@val.c2.SubCategoryID"></option>
                            }
                        }
                    </datalist>

                    @*<button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>*@

                    <button class="btn btn-outline-success my-2 my-sm-0 bg-primary text-light" type="submit">
                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-search" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z" />
                            <path fill-rule="evenodd" d="M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z" />
                        </svg>
                    </button>
                </form>
            </div>
        </div>
    </nav>
</div>






<div class="filterContainerFather">
    <div class="filterContainer">

        <div id="searchRow" class="divider">
            <span id="searchSpan">
                Search:
            </span>

            <span>
                <button type="button" class="searchBtn" id="searchButton">Save</button>

                <button type="button" class="searchBtn" id="clearButton">Clear</button>
            </span>


        </div>



        <div class="divider productRow">

            <span>Product</span>

            <div class="verticalDivider"></div>

            <span>Project</span>
        </div>

        <div class="divider productType">
            <span>Product Type</span>

            <span>


                <button class="btn my-2 my-sm-0 bg-light dropBtn" data-class="productType">
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-caret-down-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path d="M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z" />
                    </svg>
                </button>
            </span>

            <div class="drop">
                @{
                    
                    @*foreach (var item in Model.combo.tf)
                    {
                        <input type="radio" name="typefiltername" value="@item.typename">
                        @item.typename
                        <br />
                    }*@
                }

            </div>

        </div>

        <div class="divider modelYear">
            <span>Model Year: </span>

            <input class="modelYearInput" type="number" id="minModelYear" />

            -

            <input class="modelYearInput" type="number" id="maxModelYear"/>

        </div>

        <div class="techSpecRow">
            <div class="technicalSpecifications">
                <span>
                    Technical Specifications
                </span>


                <button class="btn my-2 my-sm-0 bg-light dropBtn" data-class="techSpecRow">
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-caret-down-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path d="M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z" />
                    </svg>
                </button>
            </div>


            <div class="drop">

                @{
                    foreach (var item in Model.combo.sjtn)
                    {
                        
                        <div>

                            <div data-propertyID="@item.p.PropertyID"><svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-arrow-down-up" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" d="M11.5 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L11 2.707V14.5a.5.5 0 0 0 .5.5zm-7-14a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L4 13.293V1.5a.5.5 0 0 1 .5-.5z" />
</svg>
                            @item.p.PropertyName</div>
                            
                            <div class="minmaxFilter">
                                @item.sjt.t.Min_Value
                                <input type="range" 
                                       min="@item.sjt.t.Min_Value" max="@item.sjt.t.Max_Value">
                                @item.sjt.t.Max_Value
                            </div>
                               

                        </div>
                    }



                }


            </div>
        </div>


    </div>

    <div id="ProductArea">
        <div>



        </div>
        <div class="ProductContainer">
            @{
                foreach (var item in Model.combo.sjpv)
                {
                    <div class="Product" data-modelYear="@item.sjp.prod.Model_Year">
                        @*<img src='<%= Url.Action( "show", "image", new { id = ViewData["imageID"] } ) %>' />*@
                        
                        
                        <div class="ProdcutImage">
                            <img src="@Url.Action("Image","Search",new { id = item.sjp.prod.ProductID  })" class="prodImage"/>
                        </div>
                        <b>
                            @item.sjp.prod.Product_Name<br />
                            @item.sjp.prod.Series <br />
                            @item.sjp.prod.Model <br />
                        </b>
                        <br />
                        @{
                            foreach (var e in item.pvJp)
                            {
                                <div class="propIDAndValue" data-propID="@e.prop.PropertyID" data-propertyValue="@e.propertyValue.Value">
                                    <span> @e.propertyValue.Value  </span> <span> at </span> <span> @e.prop.PropertyName</span>
                                </div>

                            }
                        }

                        <div class="compareAddTo">
                            <input type="checkbox" id="compare" name="compare"> Compare
                            <button type="button" class="btn-primary">Add To</button>
                        </div>
                    </div>


                }
            }


        </div>
    </div>
</div>


@*<input type="button" name="button" value="Search" onclick="showUser()" class="button" />*@


<script>
    // var subCategoryList = @Model.
    // var subCategory = $("a[data-selected='true']").next().attr("value");

    var disableAllSubCatOptions = function () {
        $("#subCategories").children("option").each(function () { $(this).prop("disabled", true) });

    }
    // disableAllSubCatOptions();

    $("#categoriesDropDown").on("click", "a", function (event) {
        disableAllSubCatOptions();
        // while($("#subCategories option"))
        let c = $(event.target).attr("value");
        $(`.${c}`).prop("disabled", false);
    });

    $("#search").submit(function (event) {
        console.log($("#searchInput").val());
        console.log($("#search").serializeArray());
        $(this).attr("method", "POST");
        $(this).attr("action", "https://" + window.location.host + "/Search/ProductSummary");
        console.log($(this).attr("action"));
        // event.preventDefault();
    });

    $(".dropBtn").click(function () {
        console.log("Drop button clicked");
        var parentClass = $(this).attr("data-class");
        console.log(parentClass);

        //console.log($(`.${parentClass} .drop`).attr("hidden"));
        console.log($(`.${parentClass} .drop`).is(":visible"));
            
        
        //if ($(`.${parentClass} .drop`).attr("hidden")) {
            if (!$(`.${parentClass} .drop`).is(":visible")) {
            //$(`.${parentClass} .drop`).attr("hidden", false);
            $(`.${parentClass} .drop`).show();
        } else {
                //$(`.${parentClass} .drop`).attr("hidden", true);
                $(`.${parentClass} .drop`).hide();
        }
        

    });

    var collectFilterInput = function () {
        console.log("In collectFilterInput");
        var minYear = $("#minModelYear").val();
        var maxYear = $("#maxModelYear").val();

        var filter = {
            minYear: minYear, maxYear: maxYear, prop: {}
        };
        console.log("minYear: " + minYear);
        console.log("maxYear: " + maxYear);
        var techSpecs = $(".techSpecRow .drop").children("div");
        for (var item of techSpecs) {
            
            var propId = $($(item).children("div")[0]).attr("data-propertyid");
            //var val = $($(item).children("input")[0]).val();
            var val = $($($(item).children("div")[1]).children("input")[0]).val();
            filter.prop[ propId] =  val;
            console.log("propId: " + propId);
            console.log("val: " + val);
        }
        return filter;

    }
    collectFilterInput();
    var clearFilter = function () {
        $(".Product").each(function () {
            $(this).attr("hidden", false);
            //$(this).show();

        });
    }
    $("#searchButton").click(function () {
        console.log("searchButton clicked!");
        clearFilter();
        var filter = collectFilterInput();
        $(".Product").each(function () {
            console.log("data-modelyear"+$(this).attr("data-modelyear"));
            if (filter["minYear"] && filter["maxYear"]) {
                if (!($(this).attr("data-modelyear") >= filter["minYear"] && $(this).attr("data-modelyear") <= filter["maxYear"])) {
                    $(this).attr("hidden", true);
                }
            } else if (filter["minYear"]) {
                if (!(this.attr["data-modelyear"] >= filter["minYear"])) {
                    $(this).attr("hidden", true);
                }
            } else if (filter["maxYear"]) {
                if (!(this.attr["data-modelyear"] <= filter["maxYear"])) {
                    $(this).attr("hidden", true);
                }
            }
            var propElements = $(this).children(".propIDAndValue");
            for (var elem of propElements) {
                if (filter.prop[$(elem).attr("data-propID")] > $(elem).attr("data-propertyValue")) {
                    $(this).attr("hidden", true);
                }
            }

            //for (var item of filter.prop) {
            //    var propId = item["propId"];
            //    console.log("propId: " + propId);
            //    let e = $(".propIDAndValue")
            //    console.log($(e).attr("data-propertyVal") + "- propertyVal");
            //    console.log(e);
            //    if (item["val"] > $(e).attr("data-propertyVal")) {
            //        $(this).attr("hidden", true);
            //    }
            //}
        });
    });

    $("#clearButton").click(function () {
        clearFilter();

    });



    var disableAllSubCatOptions = function () {
        $("#subCategories").children("option").each(function () { $(this).prop("disabled", true) });

    }
    // disableAllSubCatOptions();

    $("#categoriesDropDown").on("click", "a", function (event) {
        disableAllSubCatOptions();
        // while($("#subCategories option"))
        let c = $(event.target).attr("value");
        $(`.${c}`).prop("disabled", false);
    });

    $("#searchInput").on('input', function () {
        var val = this.value;
        if ($('#subCategories option').filter(function () {
            return this.value.toUpperCase() === val.toUpperCase();
        }).length) {
            var id = $(`option[value='${val}']`).attr("data-id");
            $(this).attr("data-SubCategoryID", id);
        }
    });


    $("#search").submit(function (event) {
        console.log($("#searchInput").val());
        console.log($("#search").serializeArray());
        $(this).attr("method", "POST");
        $(this).attr("action", "https://" + window.location.host + "/Search/ProductSummary");
        var sid_val = $("#searchInput").attr("data-SubCategoryID");
        var sid = $(this).find("#SubCategoryID");

        if (sid.length != 0) {
            sid.remove();
        }
        $(this).append(`<input name='SubCategoryID' id='SubCategoryID' value='${sid_val}' hidden />`);
        console.log($(this).attr("action"));
        // event.preventDefault();
    });


</script>

